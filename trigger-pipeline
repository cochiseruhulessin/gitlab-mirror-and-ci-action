#!/usr/bin/env python3
import json
import os
import sys
import time

import gitlab


FAILED_STATES = ['canceled', 'failed']
GITLAB_HOSTNAME = os.environ['GITLAB_HOSTNAME']
GITLAB_TOKEN = os.environ['GITLAB_PASSWORD']
GITLAB_PROJECT_ID = os.environ['GITLAB_PROJECT_ID']
PASS_VARIABLES = os.getenv('PASS_VARIABLES')


def get_environment():
    """Return a dictionary holding the environment variables used by the pipeline."""
    if not PASS_VARIABLES:
        print("No environment variable were specified to add to the pipeline.")
        return []
    environ = {}
    for k in filter(bool, str.split(PASS_VARIABLES, ':')):
        if not os.getenv(k):
            continue
        environ[k] = os.getenv(k)
    return [{'key': x, 'value': y} for x, y in dict.items(environ)]


def main(hostname, token, project_id, ref):
    client = gitlab.Gitlab(f'https://{hostname}', private_token=token)
    project = client.projects.get(project_id)
    pipeline = project.pipelines.create({
        'ref': ref,
        'variables': get_environment()
    })
    print("remote:")
    print("remote: To view the GitLab pipeline for this action, visit:")
    print(f"remote:  {pipeline.web_url}")
    print("remote:")
    while pipeline.finished_at is None:
        time.sleep(5)
        pipeline.refresh()

    if pipeline.status in FAILED_STATES:
        print(f"remote: Pipeline errored with status {pipeline.status}", file=sys.stderr)
        sys.exit(1)
    print(f"remote: Pipeline finished with state: {pipeline.status}")


if __name__ == '__main__':
    main(GITLAB_HOSTNAME, GITLAB_TOKEN, GITLAB_PROJECT_ID, sys.argv[1])
