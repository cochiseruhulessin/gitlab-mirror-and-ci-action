#!/usr/bin/env python3
import json
import os
import sys
import time

import requests


FAILED_STATES = ['canceled']
GITLAB_HOSTNAME = os.environ['GITLAB_HOSTNAME']
GITLAB_TOKEN = os.environ['GITLAB_PASSWORD']
GITLAB_PROJECT_ID = os.environ['GITLAB_PROJECT_ID']


def main(hostname, token, project_id, ref):
    headers = {'PRIVATE-TOKEN': token}
    endpoint = f"https://{hostname}/api/v4/projects/{project_id}/pipeline?ref={ref}"

    response = requests.post(endpoint, headers=headers)
    try:
        response.raise_for_status()
    except Exception as e:
        print(json.dumps(response.json(), indent=2))
        raise
    dto = response.json()

    pipeline_id = dto['id']
    endpoint = f"https://{hostname}/api/v4/projects/{project_id}/pipelines/{pipeline_id}"
    while dto['finished_at'] is None:
        time.sleep(5)
        response = requests.get(endpoint, headers=headers)
        response.raise_for_status()
        dto = response.json()

    status = dto.get('status')
    if status in FAILED_STATES:
        print(f"Pipeline errored with status {status}", file=sys.stderr)
        sys.exit(1)
    print(f"Pipeline finished with state: {status}")


if __name__ == '__main__':
    main(GITLAB_HOSTNAME, GITLAB_TOKEN, GITLAB_PROJECT_ID, sys.argv[1])
cochise@cochise:~/client-chevron-portfoliooptim
